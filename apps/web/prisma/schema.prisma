// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  avatar        String?
  createdAt     DateTime  @default(now())

  // auth
  Session               Session[]
  EmailVerificationCode EmailVerificationCode[]
  Playlist              Playlist[]
  FileHash              FileHash[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model EmailVerificationCode {
  id            String    @id @default(cuid())
  code          String
  userId        String
  user          User      @relation(references: [id], fields: [userId], onDelete: Cascade)
  email         String
  emailVerified DateTime?

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model Playlist {
  id   String @id @default(cuid())
  name String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  PlaylistTrack PlaylistTrack[]
}

model PlaylistTrack {
  id       String @id @default(cuid())
  album    String
  duration Float  @default(0)
  title    String
  genre    String
  artists  String
  format   String

  file   FileHash? @relation(fields: [fileId], references: [id])
  fileId String?

  playlist   Playlist? @relation(fields: [playlistId], references: [id])
  playlistId String?
}

model FileHash {
  id   String @id @default(cuid())
  key  String @unique // aws s3 path
  hash String @unique // file md5 hash

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  PlaylistTrack PlaylistTrack[]
}
